import { QueryFunction } from "react-query/core";
import { CreateQueryOptions, CreateQueryResult } from "./types";
declare type MAXIMUM_DEPTH = 20;
declare type GetOptions<T extends any> = T extends {
    queryFnData: infer TQueryFnData;
    error?: infer TError;
    data: infer TData;
} ? CreateQueryOptions<TQueryFnData, TError, TData> : T extends {
    queryFnData: infer TQueryFnData;
    error?: infer TError;
} ? CreateQueryOptions<TQueryFnData, TError> : T extends {
    data: infer TData;
    error?: infer TError;
} ? CreateQueryOptions<unknown, TError, TData> : T extends [infer TQueryFnData, infer TError, infer TData] ? CreateQueryOptions<TQueryFnData, TError, TData> : T extends [infer TQueryFnData, infer TError] ? CreateQueryOptions<TQueryFnData, TError> : T extends [infer TQueryFnData] ? CreateQueryOptions<TQueryFnData> : T extends {
    queryFn?: QueryFunction<infer TQueryFnData>;
    select: (data: any) => infer TData;
} ? CreateQueryOptions<TQueryFnData, unknown, TData> : T extends {
    queryFn?: QueryFunction<infer TQueryFnData>;
} ? CreateQueryOptions<TQueryFnData> : CreateQueryOptions;
declare type GetResults<T> = T extends {
    queryFnData: any;
    error?: infer TError;
    data: infer TData;
} ? CreateQueryResult<TData, TError> : T extends {
    queryFnData: infer TQueryFnData;
    error?: infer TError;
} ? CreateQueryResult<TQueryFnData, TError> : T extends {
    data: infer TData;
    error?: infer TError;
} ? CreateQueryResult<TData, TError> : T extends [any, infer TError, infer TData] ? CreateQueryResult<TData, TError> : T extends [infer TQueryFnData, infer TError] ? CreateQueryResult<TQueryFnData, TError> : T extends [infer TQueryFnData] ? CreateQueryResult<TQueryFnData> : T extends {
    queryFn?: QueryFunction<any>;
    select: (data: any) => infer TData;
} ? CreateQueryResult<TData> : T extends {
    queryFn?: QueryFunction<infer TQueryFnData>;
} ? CreateQueryResult<TQueryFnData> : CreateQueryResult;
/**
 * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param
 */
declare type QueriesOptions<T extends any[], Result extends any[] = [], Depth extends ReadonlyArray<number> = []> = Depth["length"] extends MAXIMUM_DEPTH ? CreateQueryOptions[] : T extends [] ? [] : T extends [infer Head] ? [...Result, GetOptions<Head>] : T extends [infer Head, ...infer Tail] ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]> : unknown[] extends T ? T : T extends CreateQueryOptions<infer TQueryFnData, infer TError, infer TData>[] ? CreateQueryOptions<TQueryFnData, TError, TData>[] : CreateQueryOptions[];
/**
 * QueriesResults reducer recursively maps type param to results
 */
declare type QueriesResults<T extends any[], Result extends any[] = [], Depth extends ReadonlyArray<number> = []> = Depth["length"] extends MAXIMUM_DEPTH ? CreateQueryResult[] : T extends [] ? [] : T extends [infer Head] ? [...Result, GetResults<Head>] : T extends [infer Head, ...infer Tail] ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]> : T extends CreateQueryOptions<infer TQueryFnData, infer TError, infer TData>[] ? CreateQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[] : CreateQueryResult[];
export declare function useQueries<T extends any[]>(queries: readonly [...QueriesOptions<T>]): QueriesResults<T>;
export {};
//# sourceMappingURL=useQueries.d.ts.map